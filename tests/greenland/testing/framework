#!/usr/bin/env python3
#
#   Greenland -- a Python based scripting environment.
#   Copyright (C) 2015-2017  M E Leypold.
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation; either version 2 of the
#   License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
#   02110-1301 USA.


import tests.local

from greenland.testing.framework import *


# * --- Test Infrastructure
# ** -- This is a simple test

from   greenland.testing.simple \
    import test

# ** -- Things about which we want to write expectations

def double(x):
    return(2*x)

class SomeThing(Exception): pass
class AnotherThing(Exception): pass

def raise_something(some=True):
    if some:
        raise SomeThing("SomeThing")
    else:
        raise AnotherThing("AnotherThing")
    return 1234


# * --- Functional Tests
# ** -- 'returns' Expectations 


test.check.raises_not (
    lambda:   expect( lambda: double(5) ) |returns| 10
)

test.check.raises (
    lambda:   expect( lambda: double(5) ) |returns| (11),
    
    raises     = UnexpectedResult,
    satisfying = lambda ex: ex.actual == 10 and ex.expected == 11
)

test.check.raises_not (    
    lambda:

    expect( lambda x : x*x ) |returning| {
        5 : 25,
        7 : 49
    }
)

test.check.raises (
    
    lambda:    expect( raise_something ) |returns| (11),
    
    raises     = UnexpectedException,
    satisfying = lambda ex: ex.expected == 11 and type(ex.actual) == SomeThing
)

# ** -- `raises` Expectations.

test.check.raises_not (
    
    lambda:    expect( lambda: raise_something() ) |raises| (SomeThing),
)


test.check.raises (
    
    lambda:    expect( lambda: double(5) ) |raises| (SomeThing),
    
    raises     = MissingException,
    satisfying = lambda ex: ex.expected == SomeThing and ex.actual == 10
)


test.check.raises (
    
    lambda:    expect( lambda: raise_something(some=False) ) |raises| (SomeThing),
    
    raises     = WrongException,
    satisfying = lambda ex: ex.expected == SomeThing and type(ex.actual) == AnotherThing
)

test.check.raises_not (    
    lambda:

    expect( lambda x: raise_something(x) ) |raising| {
        
        True  : SomeThing,
        False : AnotherThing
    }
)




